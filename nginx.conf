load_module modules/ngx_http_image_filter_module.so;

events {}

http {

#     upstream api-server {
#         server docker.for.mac.localhost:8001 ;
#         server 127.0.0.1:8001 ;
#         server 127.0.0.1:8002 ;
#         server docker.for.mac.localhost:8000 backup;
#         server 127.0.0.1:8000 backup;
#     }
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    # Internal image  server.
    server {
      server_name localhost;
      listen 8888;

      include       /etc/nginx/mime.types;
      default_type  application/octet-stream;

      location ~ "^/images/_resize/(?<width>\d+)/(?<height>\d+)/(?<image>.+)$" {
        alias /usr/share/nginx/html/images/$image;
        image_filter resize $width $height;
        image_filter_jpeg_quality 80;
        image_filter_buffer 8M;
      }

      location ~ "^/images/_crop/(?<width>\d+)/(?<height>\d+)/(?<image>.+)$" {
        alias /usr/share/nginx/html/images/$image;
        image_filter crop $width $height;
        image_filter_jpeg_quality 80;
        image_filter_buffer 8M;
      }

      location ~ "^/images/_rotate/(?<degree>\d+)/(?<image>.+)$" {
        alias /usr/share/nginx/html/images/$image;
        image_filter rotate $degree;
        image_filter_jpeg_quality 80;
        image_filter_buffer 8M;
      }
    }

    # Cache settings
    proxy_cache_path /tmp/nginx-images-cache/ levels=1:2 keys_zone=images:10m inactive=24h max_size=100m;

    server {
        listen 80;

        root /usr/share/nginx/html;


#         location / {
#             try_files $uri $uri/ =404;
#         }

        # Pass requests to your resizing server
          location ~ "^/images/_resize/(?<width>(640|320))/(?<height>(640|320))/(?<image>.+)$" {
            proxy_pass http://localhost:8888/images/_resize/$width/$height/$image;
            proxy_cache images;
            proxy_cache_valid 200 24h;
          }

          location ~ "^/images/_crop/(?<width>(640|320))/(?<height>(640|320))/(?<image>.+)$" {
            proxy_pass http://localhost:8888/images/_crop/$width/$height/$image;
            proxy_cache images;
            proxy_cache_valid 200 24h;
          }

          location ~ "^/images/_rotate/(?<degree>(90|180|270))/(?<image>.+)$" {
            proxy_pass http://localhost:8888/images/_rotate/$degree/$image;
            proxy_cache images;
            proxy_cache_valid 200 24h;
          }

          # I got this from one of the tutorials, apparently it helps avoid the error
          # "no resolver defined to resolve localhost"
          location /media {
            proxy_pass http://localhost:8888/;
          }

#         location /api {
#             proxy_pass http://springbootapp/;
#         }

    }
}